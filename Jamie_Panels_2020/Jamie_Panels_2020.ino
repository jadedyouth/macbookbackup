//Jamie Panels

#include <FastLED.h>

CRGB leds[450];

//byte main_hue = 35;
//int index;

//const int p1 = 1*150; //for replicating arrays each panel has 150 leds
//const int p2 = 2*150;
const int p0_J []{44,45,74,75,104,105,134,135,43,46,73,76,103,106,133,136,77,102,78,101,79,100,80,99,81,98,82,97,83,96,84,95,
85,94,86,93,2,27,87,92,1,28,31,58,61,88,91,0,29,30,59,60,89,90}; //54
/*
const int p1_J []{p1+44,p1+45,p1+74,p1+75,p1+104,p1+105,p1+134,p1+135,p1+43,p1+46,p1+73,p1+76,p1+103,p1+106,p1+133,p1+136,p1+77,p1+102,p1+78,p1+101,p1+79,p1+100,p1+80,p1+99,p1+81,p1+98,p1+82,p1+97,p1+83,p1+96,p1+84,p1+95,p1+
85,p1+94,p1+86,p1+93,p1+2,p1+27,p1+87,p1+92,p1+1,p1+28,p1+31,p1+58,p1+61,p1+88,p1+91,p1+0,p1+29,p1+30,p1+59,p1+60,p1+89,p1+90}; //54
const int p2_J []{p2+44,p2+45,p2+74,p2+75,p2+104,p2+105,p2+134,p2+135,p2+43,p2+46,p2+73,p2+76,p2+103,p2+106,p2+133,p2+136,p2+77,p2+102,p2+78,p2+101,p2+79,p2+100,p2+80,p2+99,p2+81,p2+98,p2+82,p2+97,p2+83,p2+96,p2+84,p2+95,p2+
85,p2+94,p2+86,p2+93,p2+2,p2+27,p2+87,p2+92,p2+1,p2+28,p2+31,p2+58,p2+61,p2+88,p2+91,p2+0,p2+29,p2+30,p2+59,p2+60,p2+89,p2+90}; //54
*/


const int p0_A[] {74,75,46,73,76,103,47,102,41,48,101,108,40,49,100,109,39,50,99,110,21,38,111,128,22,37,112,127,23,36,53,66,83,96,113,126,24,35,
54,65,84,95,114,125,25,34,115,124,3,26,123,146,2,27,122,147,1,28,121,148,0,29,120,149}; //64
/*
const int p1_A[] {p1+74,p1+75,p1+46,p1+73,p1+76,p1+103,p1+47,p1+102,p1+41,p1+48,p1+101,p1+108,p1+40,p1+49,p1+100,p1+109,p1+39,p1+50,p1+99,p1+110,p1+21,p1+38,p1+111,p1+128,p1+22,p1+37,p1+112,p1+127,p1+23,p1+36,p1+53,p1+66,p1+83,p1+96,p1+113,p1+126,p1+24,p1+35,p1+
54,p1+65,p1+84,p1+95,p1+114,p1+125,p1+25,p1+34,p1+115,p1+124,p1+3,p1+26,p1+123,p1+146,p1+2,p1+27,p1+122,p1+147,p1+1,p1+28,p1+121,p1+148,p1+0,p1+29,p1+120,p1+149}; //64
const int p2_A[] {p2+74,p2+75,p2+46,p2+73,p2+76,p2+103,p2+47,p2+102,p2+41,p2+48,p2+101,p2+108,p2+40,p2+49,p2+100,p2+109,p2+39,p2+50,p2+99,p2+110,p2+21,p2+38,p2+111,p2+128,p2+22,p2+37,p2+112,p2+127,p2+23,p2+36,p2+53,p2+66,p2+83,p2+96,p2+113,p2+126,p2+24,p2+35,p2+
54,p2+65,p2+84,p2+95,p2+114,p2+125,p2+25,p2+34,p2+115,p2+124,p2+3,p2+26,p2+123,p2+146,p2+2,p2+27,p2+122,p2+147,p2+1,p2+28,p2+121,p2+148,p2+0,p2+29,p2+120,p2+149}; //64
*/


const int p0_M[]{14,15,134,135,13,16,133,136,12,17,42,47,102,107,132,137,11,18,41,48,101,108,131,138,10,19,40,49,70,79,100,109,130,139,9,20,50,69,80,99,129,140,8,21,51,68,81,98,128,141,7,22,67,82,127,142,6,23,66,83,126,143,
5,24,125,144,4,25,124,145,3,26,123,146,2,27,122,147,1,28,121,148,0,29,120,149}; //86
/*
const int p1_M[]{p1+14,p1+15,p1+134,p1+135,p1+13,p1+16,p1+133,p1+136,p1+12,p1+17,p1+42,p1+47,p1+102,p1+107,p1+132,p1+137,p1+11,p1+18,p1+41,p1+48,p1+101,p1+108,p1+131,p1+138,p1+10,p1+19,p1+40,p1+49,p1+70,p1+79,p1+100,p1+109,p1+130,p1+139,p1+9,p1+20,p1+50,p1+69,p1+80,p1+99,p1+129,p1+140,p1+8,p1+21,p1+51,p1+68,p1+81,p1+98,p1+128,p1+141,p1+7,p1+22,p1+67,p1+82,p1+127,p1+142,p1+6,p1+23,p1+66,p1+83,p1+126,p1+143,p1+
5,p1+24,p1+125,p1+144,p1+4,p1+25,p1+124,p1+145,p1+3,p1+26,p1+123,p1+146,p1+2,p1+27,p1+122,p1+147,p1+1,p1+28,p1+121,p1+148,p1+0,p1+29,p1+120,p1+149}; //86
const int p2_M[]{p2+14,p2+15,p2+134,p2+135,p2+13,p2+16,p2+133,p2+136,p2+12,p2+17,p2+42,p2+47,p2+102,p2+107,p2+132,p2+137,p2+11,p2+18,p2+41,p2+48,p2+101,p2+108,p2+131,p2+138,p2+10,p2+19,p2+40,p2+49,p2+70,p2+79,p2+100,p2+109,p2+130,p2+139,p2+9,p2+20,p2+50,p2+69,p2+80,p2+99,p2+129,p2+140,p2+8,p2+21,p2+51,p2+68,p2+81,p2+98,p2+128,p2+141,p2+7,p2+22,p2+67,p2+82,p2+127,p2+142,p2+6,p2+23,p2+66,p2+83,p2+126,p2+143,p2+
5,p2+24,p2+125,p2+144,p2+4,p2+25,p2+124,p2+145,p2+3,p2+26,p2+123,p2+146,p2+2,p2+27,p2+122,p2+147,p2+1,p2+28,p2+121,p2+148,p2+0,p2+29,p2+120,p2+149}; //86
*/


const int p0_I[] {44,45,74,75,104,105,43,46,73,76,103,106,72,77,71,78,70,79,69,80,68,81,67,82,66,83,65,84,64,85,63,86,62,87,
31,58,61,88,91,118,30,59,60,89,90,119}; //46

/*
const int p1_I[] {p1+44,p1+45,p1+74,p1+75,p1+104,p1+105,p1+43,p1+46,p1+73,p1+76,p1+103,p1+106,p1+72,p1+77,p1+71,p1+78,p1+70,p1+79,p1+69,p1+80,p1+68,p1+81,p1+67,p1+82,p1+66,p1+83,p1+65,p1+84,p1+64,p1+85,p1+63,p1+86,p1+62,p1+87,
p1+31,p1+58,p1+61,p1+88,p1+91,p1+118,p1+30,p1+59,p1+60,p1+89,p1+90,p1+119}; //46
const int p2_I[] {p2+44,p2+45,p2+74,p2+75,p2+104,p2+105,p2+43,p2+46,p2+73,p2+76,p2+103,p2+106,p2+72,p2+77,p2+71,p2+78,p2+70,p2+79,p2+69,p2+80,p2+68,p2+81,p2+67,p2+82,p2+66,p2+83,p2+65,p2+84,p2+64,p2+85,p2+63,p2+86,p2+62,p2+87,
p2+31,p2+58,p2+61,p2+88,p2+91,p2+118,p2+30,p2+59,p2+60,p2+89,p2+90,p2+119}; //46 */

/*
const int p0_E[] {14,15,44,45,74,75,104,105,134,13,16,43,46,73,76,103,106,133,12,17,11,18,10,19,9,20,8,21,38,51,68,81,98,111,7,22,37,52,67,82,97,112,6,23,5,24,4,25,3,26,2,27,1,28,31,58,61,88,91,118,121,
0,29,30,59,60,89,90,119,120};//70 */

/*
const int p1_E[] {p1+14,p1+15,p1+44,p1+45,p1+74,p1+75,p1+104,p1+105,p1+134,p1+13,p1+16,p1+43,p1+46,p1+73,p1+76,p1+103,p1+106,p1+133,p1+12,p1+17,p1+11,p1+18,p1+10,p1+19,p1+9,p1+20,p1+8,p1+21,p1+38,p1+51,p1+68,p1+81,p1+98,p1+111,p1+7,p1+22,p1+37,p1+52,p1+67,p1+82,p1+97,p1+112,p1+6,p1+23,p1+5,p1+24,p1+4,p1+25,p1+3,p1+26,p1+2,p1+27,p1+1,p1+28,p1+31,p1+58,p1+61,p1+88,p1+91,p1+118,p1+121,p1+
0,p1+29,p1+30,p1+59,p1+60,p1+89,p1+90,p1+119,p1+120};//70
const int p2_E[] {p2+14,p2+15,p2+44,p2+45,p2+74,p2+75,p2+104,p2+105,p2+134,p2+13,p2+16,p2+43,p2+46,p2+73,p2+76,p2+103,p2+106,p2+133,p2+12,p2+17,p2+11,p2+18,p2+10,p2+19,p2+9,p2+20,p2+8,p2+21,p2+38,p2+51,p2+68,p2+81,p2+98,p2+111,p2+7,p2+22,p2+37,p2+52,p2+67,p2+82,p2+97,p2+112,p2+6,p2+23,p2+5,p2+24,p2+4,p2+25,p2+3,p2+26,p2+2,p2+27,p2+1,p2+28,p2+31,p2+58,p2+61,p2+88,p2+91,p2+118,p2+121,p2+
0,p2+29,p2+30,p2+59,p2+60,p2+89,p2+90,p2+119,p2+120};//70 */


void setup() {
 FastLED.addLeds<WS2811,6,GRB>(leds, 450);


}

void loop() {



















  for (int i = 0; i< 54; i++){leds[p0_J[i]] = CHSV (160, 255, 150);} 
  for (int i = 0; i< 54; i++){leds[p0_J[i]+150] = CHSV (160, 255, 150);}
  for (int i = 0; i< 54; i++){leds[p0_J[i]+300] = CHSV (160, 255, 150);}  FastLED.show();
delay (1000);

for (int i = 0; i< 450; i++){leds[i] = CHSV (0, 0, 0);}  




  for (int i = 0; i< 64; i++){leds[p0_A[i]] = CHSV (160, 255, 150);} 
  for (int i = 0; i< 64; i++){leds[p0_A[i]+150] = CHSV (160, 255, 150);}
  for (int i = 0; i< 64; i++){leds[p0_A[i]+300] = CHSV (160, 255, 150);}  FastLED.show();

delay (1000);
for (int i = 0; i< 450; i++){leds[i] = CHSV (0, 0, 0);} 




  for (int i = 0; i< 86; i++){leds[p0_M[i]] = CHSV (160, 255, 150);} 
  for (int i = 0; i< 86; i++){leds[p0_M[i]+150] = CHSV (160, 255, 150);}
  for (int i = 0; i< 86; i++){leds[p0_M[i]+300] = CHSV (160, 255, 150);}  FastLED.show();

delay (1000);
for (int i = 0; i< 450; i++){leds[i] = CHSV (0, 0, 0);}  




  for (int i = 0; i< 46; i++){leds[p0_I[i]] = CHSV (160, 255, 150);} 
  for (int i = 0; i< 46; i++){leds[p0_I[i]+150] = CHSV (160, 255, 150);}
  for (int i = 0; i< 46; i++){leds[p0_I[i]+300] = CHSV (160, 255, 150);}  FastLED.show();

delay (1000);
for (int i = 0; i< 450; i++){leds[i] = CHSV (0, 0, 0);}   FastLED.show();



/*
  for (int i = 0; i< 70; i++){leds[p0_E[i]] = CHSV (160, 255, 150);} 
  for (int i = 0; i< 70; i++){leds[p0_E[i]+150] = CHSV (160, 255, 150);}
  for (int i = 0; i< 70; i++){leds[p0_E[i]+300] = CHSV (160, 255, 150);}
delay (1000);
for (int i = 0; i< 450; i++){leds[i] = CHSV (0, 0, 0);} 

*/

//gap between again
delay (1000);  





/*
index++; if (index>=150) {index = 0;}

leds[index] = CHSV(main_hue, 255, 120);  
leds[index+150] = CHSV(main_hue, 255, 120);
leds[index+300] = CHSV(main_hue, 255, 120);   

leds[index-1] = CHSV(main_hue, 255, 0);  
leds[index+150-1] = CHSV(main_hue, 255, 0);
leds[index+300-1] = CHSV(main_hue, 255, 0);   

delay (20);
*/
//for(int i = 0; i < 450; i++) { leds[i] = CHSV(0, 0, 0); }  
 FastLED.show();
}
